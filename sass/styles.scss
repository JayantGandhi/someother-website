@import 'fontello';
@import 'fontello-codes';
@import 'fontello-embedded';
@import 'my-animations';
@import url(http://fonts.googleapis.com/css?family=Roboto);
@import 'buttons';
@import 'hex';
@import 'home';

html {
  font-family: 'Roboto', sans-serif;
  font-size: 10px; //so we can use rems more easily
}

body {
  margin: 0;
  font-size: 1.6rem;
}

.home-button {
  position: absolute;
  top: 0;
  left: 0;
}

.view-container {
  font-size: 1.6rem;

  .view-frame {
    .home-description {
      min-height: 20rem;
      position: absolute;
      right: 0;
      width: 50%;
      top: 5rem;
      z-index: -1; //I dont like it but its the easiest way to acheive the effect while keeping the html not hideous

      .zoom-trans {
        position: absolute;
        width: 100%;
        top: 0;
      }
    }
  }
}

.resume-list {
  list-style: none;

  .resume-list-item {
    display: inline-block;
    cursor: grab;
    cursor: -webkit-grab;
    border: 1px dotted #717171;
    margin: .5rem;

    .image {
      height: 20rem;
      width: 20rem;
      display: inline-block;
      background-repeat: no-repeat;
      background-size: cover;
      background-position: center;
    }
  }
}

.flexbox {
  .row {
    display: table;
    table-layout: fixed;
    width: 100%;

    // use flexbox if we can
    html.flexbox & {
      display: flex;
    }

    .cell {
      display: table-cell;
      flex: 1;
      flex-direction: column;
      position: relative;

      //vertical alignment to middle
      vertical-align: middle; // table
      justify-content: center; // flexbox

      html.flexbox & {
        display: flex;
      }

      &.top-align {
        vertical-align: top; //table
        justify-content: flex-start; //flexbox
      }

      &.bottom-align {
        vertical-align: bottom; //table
        justify-content: flex-end; //flexbox
      }

      &.left-align {
        text-align: left;
      }

      &.right-align {
        text-align: right;
      }

      // make a cell double width
      // so far only works when flexbox works
      &.double {
        flex-grow: 2; //dont know the table fallback...
      }
    }
  }
}
.flexbox {
  .row {
    display: table;
    table-layout: fixed;
    width: 100%;

    // use flexbox if we can
    html.flexbox & {
      display: flex;
    }

    .cell {
      display: table-cell;
      flex: 1;
      flex-direction: column;
      position: relative;

      //vertical alignment to middle
      vertical-align: middle; // table
      justify-content: center; // flexbox

      html.flexbox & {
        display: flex;
      }

      &.top-align {
        vertical-align: top; //table
        justify-content: flex-start; //flexbox
      }

      &.bottom-align {
        vertical-align: bottom; //table
        justify-content: flex-end; //flexbox
      }

      &.left-align {
        text-align: left;
      }

      &.right-align {
        text-align: right;
      }

      // make a cell double width
      // so far only works when flexbox works
      &.double {
        flex-grow: 2; //dont know the table fallback...
      }
    }
  }
}

//needed to make transitions work with ng-show
.ng-hide-remove,
.ng-hide-add {
  display: block !important;
  @include fade-in(1s);
}


.drop-box {
  height: 20rem;
  width: 20rem;
  border: 1px dotted black;
  position: absolute;
  top: 0;
  right: 15rem;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
}

noscript {
  text-align: center;

  p {
    padding: 10rem;
  }
}

.loading {
  position: absolute;
  width: 100vw;
  height: 100vh;
  text-align: center;
  top: 50%;
  z-index: -10;
}

.loading-text:after {
  overflow: hidden;
  display: inline-block;
  vertical-align: bottom;
  -webkit-animation: ellipsis steps(4,end) 900ms infinite;
  animation: ellipsis steps(4,end) 900ms infinite;
  content: "\2026"; /* ascii code for the ellipsis character */
  width: 0px;
}

.askew {
  transform: rotate(10deg);
  display: inline-block;
}

.low-profile-link {
  color: inherit;
  text-decoration: none;

  &:hover,
  &:active {
    text-shadow:
      -1px -1px 0 #FF830B,
      1px -1px 0 #FF830B,
      1px -1px 0 #FF830B,
      1px 1px 0 #FF830B;
  }
}